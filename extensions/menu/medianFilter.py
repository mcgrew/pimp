"""
nintendize.py
Copyright 2007 Thomas McGrew

This file is part of The Python Image Manipulation Project.

The Python Image Manipulation Project is free software: you can
redistribute it and/or modify it under the terms of the GNU General
Public License as published by the Free Software Foundation, either
version 2 of the License, or (at your option) any later version.

The Python Image Manipulation Project is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with The Python Image Manipulation Project.  If not, see
<http://www.gnu.org/licenses/>.
"""

import wx

from extensions.lib import medianFilter

MENU = "Fil&ter"
LABEL = "&Median Filter"
DESCRIPTION = "Smooths an image by making each pixel appear more like it's neighboring pixels"

def execute( width, height, data, filterSize=None ):
    """
    Smooths an image by making each pixel appear more like it's neighboring pixels.
    
    :Parameters:
        filename : string
            The name of the file to write to.
        width : int
            The width of the image in pixels
        height : int
            The height of the image in pixels
        data : string
            The data as a binary string.
        filterSize : int
            The size of the filter to be applied to the image. A dialog box will
            request this value if it is not supplied.
    
    :rtype: tuple
    :returns: a tuple containing a width, height, and data as a binary string.
    """
    if ( filterSize is None ):
        dialog = medianFilterDialog( )
        values = dialog.ShowModal( )
        
        if not values:
            return False
        
        filterSize = values
    
    return medianFilter.execute( width, height, data, filterSize )


class medianFilterDialog( wx.Dialog ):
    """
    A class for getting input values from the user for the nintendize filter
    """
    def __init__( self, parent=None, id=-1, okFunction=None, sliderUpdateFunction=None, title="Median Filter Options" ):
        """
        Initializes the dialog box.

        :Parameters:
            parent : wx.Frame
                The parent of this dialog. Defaults to None.
            id : int
                The id of this dialog. Defaults to -1
            okFunction : function
                An optional additional function to be called when the OK button is pressed. Defaults to None
            sliderUpdateFunction : function
                An an optional additional function to be called when one of the sliders is changed. Defaults to None.
            title : String
                The title of the dialog box to be displayed in the titlebar. Defaults to "Median Filter Options".
        """
        wx.Dialog.__init__( self, None, -1, title, wx.DefaultPosition, ( 320, 70 ) )

        self.filterSizeValue = 3
        
        self.filterSizeSlider   = wx.Slider( self, -1, value = self.filterSizeValue, minValue =  3, maxValue =  15, pos = ( 70, 10 ), size = ( 200, 20 ) )
        
        self.displayPanel = wx.Panel( self, -1, pos = ( 270, 10 ), size = ( 50, 20 ) )
        self.filterSizeDisplay   = wx.StaticText( self.displayPanel, pos = ( 0, 0 ) )

        self.labelPanel = wx.Panel( self, -1, pos = ( 0, 10 ), size = ( 70, 20 ) )
        self.filterSizeLabel   = wx.StaticText( self.labelPanel, pos = ( 0, 0 ), label="Filter Size"   )

        self.isOk = False
        okButton     = wx.Button( self, id = wx.ID_OK,     pos = (  60, 30 ), size = ( 80, 30 ) )
        cancelButton = wx.Button( self, id = wx.ID_CANCEL, pos = ( 160, 30 ), size = ( 80, 30 ) )

        if okFunction:
            self.okFunction = okFunction
        elif ( "onOk" in dir( self ) ):
            self.okFunction = self.onOk
        else:
            self.okFunction = lambda x: None # a dummy function
            
        if sliderUpdateFunction:
            self.sliderUpdateFunction = sliderUpdateFunction
        elif ( "onSliderupdate" in dir( self ) ):
            self.sliderUpdateFunction = self.onSliderupdate
        else:
            self.sliderUpdateFunction = lambda x: None # a dummy function
            
        self.updateDisplay( )


        self.Bind( wx.EVT_SLIDER, self.sliderChange )
        self.Bind( wx.EVT_CLOSE, self.cancel )
        okButton.Bind( wx.EVT_BUTTON, self.ok )
        cancelButton.Bind( wx.EVT_BUTTON, self.cancel )

    def cancel( self, event=None ):
        """
        Internal function. Called when the "Cancel" button is pressed.

        :Parameters:
            event : wx.Event
                Event generated by clicking a button. The argument is ignored.
        """
        self.Destroy( )

    def ok( self, event=None ):
        """
        Internal function. Called when the "OK" button is pressed

        :Parameters:
            event : wx.Event
                Event generated by clicking a button. The argument is ignored.
        """
        self.okFunction( self.filterSizeValue )
        self.isOk = True
        self.Destroy( )

    def sliderChange( self, event=None ):
        """
        Internal Function. Called when one of the sliders is changed within the dialog box.

        :Parameters:
            event : wx.Event
                Event generated by clicking a button. The argument is ignored.
        """
        self.filterSizeValue = self.filterSizeSlider.GetValue( )

        self.updateDisplay( )
        self.sliderUpdateFunction( self.filterSizeValue )

    def updateDisplay( self ):
        """
        Internal Function. Called when one of the sliders is changed to update the values displayed.
        """
        self.filterSizeDisplay.SetLabel( "%2d" % self.filterSizeValue   )

    def ShowModal( self ):
        """
        Displays the dialog window and waits for the user to click OK or Cancel to return a value.

        :rtype: tuple or boolean
        :returns: The values for resolution and color level in a tuple if OK is clicked. Returns False otherwise.
        """
        wx.Dialog.ShowModal( self )
        if self.isOk:
            return ( self.filterSizeValue )
        return False

    